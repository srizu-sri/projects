#include <Wire.h>
#include <WiFi.h>
#include <WebSocketsClient.h>
#include <ArduinoJson.h>
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include "MAX30105.h"
#include "heartRate.h"
#include <Adafruit_MLX90614.h>

// Define I2C pins for different buses
#define SDA_PIN_MAIN 18
#define SCL_PIN_MAIN 19
#define SDA_PIN_MLX 21
#define SCL_PIN_MLX 22

// WiFi credentials
const char* ssid = "SSID";     // WiFi name
const char* password = "PWD";  // WiFi password

// WebSocket server details
const char* websocket_server = "";  // PC's IP address
const uint16_t websocket_port = 8000;

// WebSocket client
WebSocketsClient webSocket;

// Sensors
MAX30105 particleSensor;
Adafruit_MPU6050 mpu;
Adafruit_MLX90614 mlx;

// Create two separate I2C buses
TwoWire I2C_Bus_Main = Wire;
TwoWire I2C_Bus_MLX = Wire1;

// Heart rate variables
const byte RATE_SIZE = 4;
byte rates[RATE_SIZE];
byte rateSpot = 0;
long lastBeat = 0;
float beatsPerMinute;
int beatAvg;

// Health metrics
float temperature = 0;
float post_workout_temp = 0;
int spo2Value = 0;

// MPU6050 variables for cardio moves detection
float accelThreshold = 1.2;  // Threshold for detecting significant movement (in g)
int cardioMoves = 0;
unsigned long lastMovementTime = 0;
const unsigned long movementCooldown = 500;  // Cooldown between moves (ms)
sensors_event_t a, g, temp;
float prevAccelMagnitude = 0;

// Timer variables
unsigned long lastSendTime = 0;
const unsigned long sendInterval = 2000;  // Send data every 2 seconds
unsigned long lastDebugTime = 0;

// Add sensor status flags
bool max30102_working = false;
bool mpu6050_working = false;
bool mlx90614_working = false;

// Function declarations
void scanI2CBus(TwoWire &wire);
void processHealthData();
void processCardioMoves();
void readTemperatureData();
void sendHealthData();
void webSocketEvent(WStype_t type, uint8_t * payload, size_t length);

void setup() {
  Serial.begin(115200);
  Serial.println("YogKalp Health Monitoring System");
  
  // Initialize main I2C bus with pins 18 & 19 for MAX30102 and MPU6050
  I2C_Bus_Main.begin(SDA_PIN_MAIN, SCL_PIN_MAIN);
  I2C_Bus_Main.setClock(100000);  // Lower speed for better stability
  
  // Initialize separate I2C bus with pins 21 & 22 for MLX90614
  I2C_Bus_MLX.begin(SDA_PIN_MLX, SCL_PIN_MLX);
  I2C_Bus_MLX.setClock(100000);  // Lower speed for better stability
  
  // Scan both I2C buses to help with debugging
  Serial.println("Scanning main I2C bus (pins 18 & 19):");
  scanI2CBus(I2C_Bus_Main);
  
  Serial.println("Scanning MLX I2C bus (pins 21 & 22):");
  scanI2CBus(I2C_Bus_MLX);
  
  // Initialize MAX30102 sensor on main I2C bus
  Serial.println("Initializing MAX30102...");
  for (int retry = 0; retry < 3; retry++) {
    if (particleSensor.begin(I2C_Bus_Main, I2C_SPEED_STANDARD)) {
      Serial.println("MAX30102 sensor initialized!");
      max30102_working = true;
      
      // Configure MAX30102 with default settings
      particleSensor.setup();
      particleSensor.setPulseAmplitudeRed(0x2A);  // Turn Red LED to low to indicate sensor is running
      particleSensor.setPulseAmplitudeGreen(0);   // Turn off Green LED
      break;
    }
    Serial.println("MAX30102 not found, retrying...");
    delay(1000);
  }
  
  if (!max30102_working) {
    Serial.println("MAX30102 initialization failed. Will continue without heart rate data.");
  }
  
  // Initialize MPU6050 on main I2C bus
  Serial.println("Initializing MPU6050...");
  for (int retry = 0; retry < 3; retry++) {
    if (mpu.begin(0x68, &I2C_Bus_Main)) {
      Serial.println("MPU6050 sensor initialized!");
      mpu6050_working = true;
      
      // Configure MPU6050 settings
      mpu.setAccelerometerRange(MPU6050_RANGE_8_G);
      mpu.setGyroRange(MPU6050_RANGE_500_DEG);
      mpu.setFilterBandwidth(MPU6050_BAND_21_HZ);
      break;
    }
    Serial.println("MPU6050 not found, retrying...");
    delay(1000);
  }
  
  if (!mpu6050_working) {
    Serial.println("MPU6050 initialization failed. Will continue without motion data.");
  }
  
  // Initialize MLX90614 temperature sensor on separate I2C bus
  Serial.println("Initializing MLX90614 temperature sensor...");
  for (int retry = 0; retry < 3; retry++) {
    if (mlx.begin(0x5A, &I2C_Bus_MLX)) {
      Serial.println("MLX90614 temperature sensor initialized!");
      mlx90614_working = true;
      break;
    }
    Serial.println("MLX90614 not found, retrying...");
    delay(1000);
  }
  
  if (!mlx90614_working) {
    Serial.println("MLX90614 initialization failed. Will continue without post-workout temperature data.");
  }
  
  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println();
  Serial.print("Connected to WiFi, IP address: ");
  Serial.println(WiFi.localIP());
  
  // Setup WebSocket connection
  webSocket.begin(websocket_server, websocket_port, "/esp32/health");
  webSocket.onEvent(webSocketEvent);
  webSocket.setReconnectInterval(5000);
}

void loop() {
  // Handle WebSocket connection
  webSocket.loop();
  
  // Process MAX30102 data (heart rate and SpO2) only if sensor is working
  if (max30102_working) {
    processHealthData();
  }
  
  // Process MPU6050 data for cardio moves only if sensor is working
  if (mpu6050_working) {
    processCardioMoves();
  }
  
  // Read MLX90614 temperature data only if sensor is working
  if (mlx90614_working) {
    readTemperatureData();
  }
  
  // Send data to server at regular intervals
  if (millis() - lastSendTime > sendInterval) {
    sendHealthData();
    lastSendTime = millis();
  }
  
  // Add debug output every second
  if (millis() - lastDebugTime > 1000) {
    Serial.println("--------- SENSOR READINGS ---------");
    
    if (max30102_working) {
      Serial.print("Heart Rate: ");
      Serial.print(beatAvg);
      Serial.println(" BPM");
      
      Serial.print("SpO2: ");
      Serial.print(spo2Value);
      Serial.println("%");
      
      Serial.print("Pre-workout Temp: ");
      Serial.print(temperature);
      Serial.println("°C");
      
      Serial.print("IR Value: ");
      Serial.println(particleSensor.getIR());
    } else {
      Serial.println("MAX30102 sensor not available");
    }
    
    if (mlx90614_working) {
      Serial.print("Post-workout Temp: ");
      Serial.print(post_workout_temp);
      Serial.println("°C");
    } else {
      Serial.println("MLX90614 sensor not available");
    }
    
    if (mpu6050_working) {
      Serial.print("Cardio Moves: ");
      Serial.println(cardioMoves);
    } else {
      Serial.println("MPU6050 sensor not available");
    }
    
    Serial.println("---------------------------------");
    lastDebugTime = millis();
  }
  
  delay(20);  // Small delay for stability
}

void webSocketEvent(WStype_t type, uint8_t * payload, size_t length) {
  switch(type) {
    case WStype_DISCONNECTED:
      Serial.println("WebSocket disconnected");
      break;
    case WStype_CONNECTED:
      Serial.println("WebSocket connected");
      break;
    case WStype_TEXT:
      // Handle incoming messages if needed
      break;
  }
}

void scanI2CBus(TwoWire &wire) {
  byte error, address;
  int deviceCount = 0;
  
  for(address = 1; address < 127; address++) {
    wire.beginTransmission(address);
    error = wire.endTransmission();
    
    if (error == 0) {
      Serial.print("I2C device found at address 0x");
      if (address < 16) {
        Serial.print("0");
      }
      Serial.print(address, HEX);
      
      // Try to identify common I2C devices
      if (address == 0x68) {
        Serial.print(" (MPU6050)");
      } else if (address == 0x57) {
        Serial.print(" (MAX30102)");
      } else if (address == 0x5A) {
        Serial.print(" (MLX90614)");
      }
      
      Serial.println();
      deviceCount++;
    }
    else if (error == 4) {
      Serial.print("Unknown error at address 0x");
      if (address < 16) {
        Serial.print("0");
      }
      Serial.println(address, HEX);
    }
  }
  
  if (deviceCount == 0) {
    Serial.println("No I2C devices found");
  } else {
    Serial.print("Found ");
    Serial.print(deviceCount);
    Serial.println(" device(s)");
  }
}

void processCardioMoves() {
  // Check if MPU6050 is available
  if (mpu6050_working) {
    // Add error handling for getEvent
    bool success = true;
    try {
      success = mpu.getEvent(&a, &g, &temp);
    } catch (...) {
      success = false;
    }
    
    if (success) {
      // Calculate the magnitude of acceleration
      float accelMagnitude = sqrt(a.acceleration.x * a.acceleration.x + 
                                 a.acceleration.y * a.acceleration.y + 
                                 a.acceleration.z * a.acceleration.z);
      
      // Remove gravity component (approximately 9.8 m/s²)
      accelMagnitude = abs(accelMagnitude - 9.8);
      
      // Detect significant movement with cooldown to avoid counting multiple times for one movement
      if (accelMagnitude > accelThreshold && 
          abs(accelMagnitude - prevAccelMagnitude) > 0.5 && 
          millis() - lastMovementTime > movementCooldown) {
        
        cardioMoves++;
        lastMovementTime = millis();
        
        Serial.print("Movement detected! Cardio moves: ");
        Serial.println(cardioMoves);
      }
      
      prevAccelMagnitude = accelMagnitude;
    } else {
      // If we get an error reading the MPU6050, mark it as not working
      Serial.println("Error reading from MPU6050, marking as not working");
      mpu6050_working = false;
    }
  }
}

void readTemperatureData() {
  // Read temperature from MLX90614 sensor on the separate I2C bus
  if (mlx90614_working) {
    // Add error handling
    bool success = true;
    float ambientTemp = 0;
    float objectTemp = 0;
    
    try {
      // Try to read temperature values
      ambientTemp = mlx.readAmbientTempC();
      objectTemp = mlx.readObjectTempC();
      success = true;
    } catch (...) {
      success = false;
    }
    
    if (success && objectTemp > 0 && objectTemp < 50) {  // Sanity check for valid temperature range
      post_workout_temp = objectTemp;
    } else {
      // If we get an error or invalid reading, mark the sensor as not working
      if (!success) {
        Serial.println("Error reading from MLX90614, marking as not working");
        mlx90614_working = false;
      }
    }
  }
}

void processHealthData() {
  if (max30102_working) {
    // Add error handling
    long irValue = 0;
    
    try {
      // Read from sensor
      irValue = particleSensor.getIR();
    } catch (...) {
      Serial.println("Error reading from MAX30102, marking as not working");
      max30102_working = false;
      return;
    }
    
    if (irValue > 50000) {
      // Finger is detected
      
      // Heart rate detection using PBA algorithm
      if (checkForBeat(irValue) == true) {
        long delta = millis() - lastBeat;
        lastBeat = millis();
        
        beatsPerMinute = 60 / (delta / 1000.0);
        
        if (beatsPerMinute < 255 && beatsPerMinute > 20) {
          rates[rateSpot++] = (byte)beatsPerMinute;
          rateSpot %= RATE_SIZE;
          
          // Calculate average BPM
          beatAvg = 0;
          for (byte x = 0; x < RATE_SIZE; x++)
            beatAvg += rates[x];
          beatAvg /= RATE_SIZE;
        }
      }
      
      // Read temperature from MAX30102
      try {
        temperature = particleSensor.readTemperature();
      } catch (...) {
        // If temperature reading fails, just skip it
        Serial.println("Error reading temperature from MAX30102");
      }
      
      // Calculate SpO2 (simplified approach)
      try {
        long redValue = particleSensor.getRed();
        float ratio = (float)redValue / (float)irValue;
        spo2Value = 110 - 25 * ratio;  // Simplified formula
        spo2Value = constrain(spo2Value, 90, 100);  // Constrain to reasonable values
      } catch (...) {
        // If SpO2 calculation fails, just skip it
        Serial.println("Error calculating SpO2");
      }
    }
  }
}

void sendHealthData() {
  // Create JSON document
  StaticJsonDocument<256> doc;
  
  // Only include data from working sensors
  if (max30102_working) {
    // Get the current IR value
    long irValue = 0;
    try {
      irValue = particleSensor.getIR();
      // Include IR value and finger detection status in the data
      doc["ir_value"] = irValue;
      doc["finger_detected"] = (irValue > 50000);
      
      // Send heart rate and SpO2 data
      doc["heart_rate"] = beatAvg;
      doc["spo2"] = spo2Value;
      doc["body_temp_pre"] = temperature;
    } catch (...) {
      // If reading fails, mark sensor as not working
      max30102_working = false;
    }
  }
  
  if (mlx90614_working) {
    doc["body_temp_post"] = post_workout_temp;
  }
  
  if (mpu6050_working) {
    doc["steps"] = cardioMoves;  // Send cardio moves as steps
  }
  
  // Add sensor status to the data
  doc["max30102_status"] = max30102_working ? "connected" : "disconnected";
  doc["mpu6050_status"] = mpu6050_working ? "connected" : "disconnected";
  doc["mlx90614_status"] = mlx90614_working ? "connected" : "disconnected";
  
  // Serialize JSON to string
  String jsonString;
  serializeJson(doc, jsonString);
  
  // Send data via WebSocket
  if (webSocket.isConnected()) {
    webSocket.sendTXT(jsonString);
    Serial.println("Sent health data: " + jsonString);
  } else {
    Serial.println("WebSocket not connected. Reconnecting...");
    webSocket.disconnect();
    delay(100);
    webSocket.begin(websocket_server, websocket_port, "/esp32/health");
  }
}
